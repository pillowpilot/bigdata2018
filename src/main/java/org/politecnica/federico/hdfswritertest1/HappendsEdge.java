/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.politecnica.federico.hdfswritertest1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * ************
 *  RELACIONES *
 * ************
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-25")
public class HappendsEdge implements org.apache.thrift.TBase<HappendsEdge, HappendsEdge._Fields>, java.io.Serializable, Cloneable, Comparable<HappendsEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HappendsEdge");

  private static final org.apache.thrift.protocol.TField ATTACK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attackId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationId", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HappendsEdgeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HappendsEdgeTupleSchemeFactory();

  public long attackId; // required
  public long locationId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTACK_ID((short)1, "attackId"),
    LOCATION_ID((short)2, "locationId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTACK_ID
          return ATTACK_ID;
        case 2: // LOCATION_ID
          return LOCATION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ATTACKID_ISSET_ID = 0;
  private static final int __LOCATIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTACK_ID, new org.apache.thrift.meta_data.FieldMetaData("attackId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HappendsEdge.class, metaDataMap);
  }

  public HappendsEdge() {
  }

  public HappendsEdge(
    long attackId,
    long locationId)
  {
    this();
    this.attackId = attackId;
    setAttackIdIsSet(true);
    this.locationId = locationId;
    setLocationIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HappendsEdge(HappendsEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.attackId = other.attackId;
    this.locationId = other.locationId;
  }

  public HappendsEdge deepCopy() {
    return new HappendsEdge(this);
  }

  @Override
  public void clear() {
    setAttackIdIsSet(false);
    this.attackId = 0;
    setLocationIdIsSet(false);
    this.locationId = 0;
  }

  public long getAttackId() {
    return this.attackId;
  }

  public HappendsEdge setAttackId(long attackId) {
    this.attackId = attackId;
    setAttackIdIsSet(true);
    return this;
  }

  public void unsetAttackId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTACKID_ISSET_ID);
  }

  /** Returns true if field attackId is set (has been assigned a value) and false otherwise */
  public boolean isSetAttackId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTACKID_ISSET_ID);
  }

  public void setAttackIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTACKID_ISSET_ID, value);
  }

  public long getLocationId() {
    return this.locationId;
  }

  public HappendsEdge setLocationId(long locationId) {
    this.locationId = locationId;
    setLocationIdIsSet(true);
    return this;
  }

  public void unsetLocationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  /** Returns true if field locationId is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  public void setLocationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCATIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ATTACK_ID:
      if (value == null) {
        unsetAttackId();
      } else {
        setAttackId((java.lang.Long)value);
      }
      break;

    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTACK_ID:
      return getAttackId();

    case LOCATION_ID:
      return getLocationId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ATTACK_ID:
      return isSetAttackId();
    case LOCATION_ID:
      return isSetLocationId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HappendsEdge)
      return this.equals((HappendsEdge)that);
    return false;
  }

  public boolean equals(HappendsEdge that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_attackId = true;
    boolean that_present_attackId = true;
    if (this_present_attackId || that_present_attackId) {
      if (!(this_present_attackId && that_present_attackId))
        return false;
      if (this.attackId != that.attackId)
        return false;
    }

    boolean this_present_locationId = true;
    boolean that_present_locationId = true;
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (this.locationId != that.locationId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(attackId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(locationId);

    return hashCode;
  }

  @Override
  public int compareTo(HappendsEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAttackId()).compareTo(other.isSetAttackId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttackId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attackId, other.attackId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocationId()).compareTo(other.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationId, other.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HappendsEdge(");
    boolean first = true;

    sb.append("attackId:");
    sb.append(this.attackId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationId:");
    sb.append(this.locationId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HappendsEdgeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HappendsEdgeStandardScheme getScheme() {
      return new HappendsEdgeStandardScheme();
    }
  }

  private static class HappendsEdgeStandardScheme extends org.apache.thrift.scheme.StandardScheme<HappendsEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HappendsEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTACK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.attackId = iprot.readI64();
              struct.setAttackIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.locationId = iprot.readI64();
              struct.setLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HappendsEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ATTACK_ID_FIELD_DESC);
      oprot.writeI64(struct.attackId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeI64(struct.locationId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HappendsEdgeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HappendsEdgeTupleScheme getScheme() {
      return new HappendsEdgeTupleScheme();
    }
  }

  private static class HappendsEdgeTupleScheme extends org.apache.thrift.scheme.TupleScheme<HappendsEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HappendsEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAttackId()) {
        optionals.set(0);
      }
      if (struct.isSetLocationId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAttackId()) {
        oprot.writeI64(struct.attackId);
      }
      if (struct.isSetLocationId()) {
        oprot.writeI64(struct.locationId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HappendsEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.attackId = iprot.readI64();
        struct.setAttackIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.locationId = iprot.readI64();
        struct.setLocationIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

