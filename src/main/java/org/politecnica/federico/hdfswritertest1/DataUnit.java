/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.politecnica.federico.hdfswritertest1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class DataUnit extends org.apache.thrift.TUnion<DataUnit, DataUnit._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataUnit");
  private static final org.apache.thrift.protocol.TField ATTACK_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("attackProperty", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField WEAPON_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("weaponProperty", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATION_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("locationProperty", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField HAPPEDS_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("happedsEdge", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField USES_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("usesEdge", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTACK_PROPERTY((short)1, "attackProperty"),
    WEAPON_PROPERTY((short)2, "weaponProperty"),
    LOCATION_PROPERTY((short)3, "locationProperty"),
    HAPPEDS_EDGE((short)4, "happedsEdge"),
    USES_EDGE((short)5, "usesEdge");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTACK_PROPERTY
          return ATTACK_PROPERTY;
        case 2: // WEAPON_PROPERTY
          return WEAPON_PROPERTY;
        case 3: // LOCATION_PROPERTY
          return LOCATION_PROPERTY;
        case 4: // HAPPEDS_EDGE
          return HAPPEDS_EDGE;
        case 5: // USES_EDGE
          return USES_EDGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTACK_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("attackProperty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttackProperty.class)));
    tmpMap.put(_Fields.WEAPON_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("weaponProperty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WeaponProperty.class)));
    tmpMap.put(_Fields.LOCATION_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("locationProperty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocationProperty.class)));
    tmpMap.put(_Fields.HAPPEDS_EDGE, new org.apache.thrift.meta_data.FieldMetaData("happedsEdge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HappendsEdge.class)));
    tmpMap.put(_Fields.USES_EDGE, new org.apache.thrift.meta_data.FieldMetaData("usesEdge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UsesEdge.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataUnit.class, metaDataMap);
  }

  public DataUnit() {
    super();
  }

  public DataUnit(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public DataUnit(DataUnit other) {
    super(other);
  }
  public DataUnit deepCopy() {
    return new DataUnit(this);
  }

  public static DataUnit attackProperty(AttackProperty value) {
    DataUnit x = new DataUnit();
    x.setAttackProperty(value);
    return x;
  }

  public static DataUnit weaponProperty(WeaponProperty value) {
    DataUnit x = new DataUnit();
    x.setWeaponProperty(value);
    return x;
  }

  public static DataUnit locationProperty(LocationProperty value) {
    DataUnit x = new DataUnit();
    x.setLocationProperty(value);
    return x;
  }

  public static DataUnit happedsEdge(HappendsEdge value) {
    DataUnit x = new DataUnit();
    x.setHappedsEdge(value);
    return x;
  }

  public static DataUnit usesEdge(UsesEdge value) {
    DataUnit x = new DataUnit();
    x.setUsesEdge(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case ATTACK_PROPERTY:
        if (value instanceof AttackProperty) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type AttackProperty for field 'attackProperty', but got " + value.getClass().getSimpleName());
      case WEAPON_PROPERTY:
        if (value instanceof WeaponProperty) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type WeaponProperty for field 'weaponProperty', but got " + value.getClass().getSimpleName());
      case LOCATION_PROPERTY:
        if (value instanceof LocationProperty) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type LocationProperty for field 'locationProperty', but got " + value.getClass().getSimpleName());
      case HAPPEDS_EDGE:
        if (value instanceof HappendsEdge) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type HappendsEdge for field 'happedsEdge', but got " + value.getClass().getSimpleName());
      case USES_EDGE:
        if (value instanceof UsesEdge) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type UsesEdge for field 'usesEdge', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case ATTACK_PROPERTY:
          if (field.type == ATTACK_PROPERTY_FIELD_DESC.type) {
            AttackProperty attackProperty;
            attackProperty = new AttackProperty();
            attackProperty.read(iprot);
            return attackProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case WEAPON_PROPERTY:
          if (field.type == WEAPON_PROPERTY_FIELD_DESC.type) {
            WeaponProperty weaponProperty;
            weaponProperty = new WeaponProperty();
            weaponProperty.read(iprot);
            return weaponProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOCATION_PROPERTY:
          if (field.type == LOCATION_PROPERTY_FIELD_DESC.type) {
            LocationProperty locationProperty;
            locationProperty = new LocationProperty();
            locationProperty.read(iprot);
            return locationProperty;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HAPPEDS_EDGE:
          if (field.type == HAPPEDS_EDGE_FIELD_DESC.type) {
            HappendsEdge happedsEdge;
            happedsEdge = new HappendsEdge();
            happedsEdge.read(iprot);
            return happedsEdge;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case USES_EDGE:
          if (field.type == USES_EDGE_FIELD_DESC.type) {
            UsesEdge usesEdge;
            usesEdge = new UsesEdge();
            usesEdge.read(iprot);
            return usesEdge;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ATTACK_PROPERTY:
        AttackProperty attackProperty = (AttackProperty)value_;
        attackProperty.write(oprot);
        return;
      case WEAPON_PROPERTY:
        WeaponProperty weaponProperty = (WeaponProperty)value_;
        weaponProperty.write(oprot);
        return;
      case LOCATION_PROPERTY:
        LocationProperty locationProperty = (LocationProperty)value_;
        locationProperty.write(oprot);
        return;
      case HAPPEDS_EDGE:
        HappendsEdge happedsEdge = (HappendsEdge)value_;
        happedsEdge.write(oprot);
        return;
      case USES_EDGE:
        UsesEdge usesEdge = (UsesEdge)value_;
        usesEdge.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case ATTACK_PROPERTY:
          AttackProperty attackProperty;
          attackProperty = new AttackProperty();
          attackProperty.read(iprot);
          return attackProperty;
        case WEAPON_PROPERTY:
          WeaponProperty weaponProperty;
          weaponProperty = new WeaponProperty();
          weaponProperty.read(iprot);
          return weaponProperty;
        case LOCATION_PROPERTY:
          LocationProperty locationProperty;
          locationProperty = new LocationProperty();
          locationProperty.read(iprot);
          return locationProperty;
        case HAPPEDS_EDGE:
          HappendsEdge happedsEdge;
          happedsEdge = new HappendsEdge();
          happedsEdge.read(iprot);
          return happedsEdge;
        case USES_EDGE:
          UsesEdge usesEdge;
          usesEdge = new UsesEdge();
          usesEdge.read(iprot);
          return usesEdge;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ATTACK_PROPERTY:
        AttackProperty attackProperty = (AttackProperty)value_;
        attackProperty.write(oprot);
        return;
      case WEAPON_PROPERTY:
        WeaponProperty weaponProperty = (WeaponProperty)value_;
        weaponProperty.write(oprot);
        return;
      case LOCATION_PROPERTY:
        LocationProperty locationProperty = (LocationProperty)value_;
        locationProperty.write(oprot);
        return;
      case HAPPEDS_EDGE:
        HappendsEdge happedsEdge = (HappendsEdge)value_;
        happedsEdge.write(oprot);
        return;
      case USES_EDGE:
        UsesEdge usesEdge = (UsesEdge)value_;
        usesEdge.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case ATTACK_PROPERTY:
        return ATTACK_PROPERTY_FIELD_DESC;
      case WEAPON_PROPERTY:
        return WEAPON_PROPERTY_FIELD_DESC;
      case LOCATION_PROPERTY:
        return LOCATION_PROPERTY_FIELD_DESC;
      case HAPPEDS_EDGE:
        return HAPPEDS_EDGE_FIELD_DESC;
      case USES_EDGE:
        return USES_EDGE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public AttackProperty getAttackProperty() {
    if (getSetField() == _Fields.ATTACK_PROPERTY) {
      return (AttackProperty)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'attackProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAttackProperty(AttackProperty value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ATTACK_PROPERTY;
    value_ = value;
  }

  public WeaponProperty getWeaponProperty() {
    if (getSetField() == _Fields.WEAPON_PROPERTY) {
      return (WeaponProperty)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'weaponProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setWeaponProperty(WeaponProperty value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.WEAPON_PROPERTY;
    value_ = value;
  }

  public LocationProperty getLocationProperty() {
    if (getSetField() == _Fields.LOCATION_PROPERTY) {
      return (LocationProperty)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'locationProperty' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLocationProperty(LocationProperty value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.LOCATION_PROPERTY;
    value_ = value;
  }

  public HappendsEdge getHappedsEdge() {
    if (getSetField() == _Fields.HAPPEDS_EDGE) {
      return (HappendsEdge)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'happedsEdge' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHappedsEdge(HappendsEdge value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HAPPEDS_EDGE;
    value_ = value;
  }

  public UsesEdge getUsesEdge() {
    if (getSetField() == _Fields.USES_EDGE) {
      return (UsesEdge)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'usesEdge' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUsesEdge(UsesEdge value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.USES_EDGE;
    value_ = value;
  }

  public boolean isSetAttackProperty() {
    return setField_ == _Fields.ATTACK_PROPERTY;
  }


  public boolean isSetWeaponProperty() {
    return setField_ == _Fields.WEAPON_PROPERTY;
  }


  public boolean isSetLocationProperty() {
    return setField_ == _Fields.LOCATION_PROPERTY;
  }


  public boolean isSetHappedsEdge() {
    return setField_ == _Fields.HAPPEDS_EDGE;
  }


  public boolean isSetUsesEdge() {
    return setField_ == _Fields.USES_EDGE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof DataUnit) {
      return equals((DataUnit)other);
    } else {
      return false;
    }
  }

  public boolean equals(DataUnit other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DataUnit other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
